"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const try_require_1 = tslib_1.__importDefault(require("./try-require"));
/** Try to load a plugin in various ways */
function loadPlugin([pluginPath, options], logger) {
    let plugin;
    // Try requiring a path
    if (pluginPath.startsWith('.') || pluginPath.startsWith('/')) {
        plugin = try_require_1.default(pluginPath);
    }
    // Try requiring a path from cwd
    if (!plugin && (pluginPath.startsWith('.') || pluginPath.startsWith('/'))) {
        plugin = try_require_1.default(path.join(process.cwd(), pluginPath));
        if (!plugin) {
            logger.log.warn(`Could not find plugin from path: ${pluginPath}`);
            return;
        }
    }
    // For pkg bundle
    if (!plugin) {
        plugin = try_require_1.default(path.join(__dirname, '../../../../../plugins/', pluginPath, 'dist/index.js'));
    }
    // For a user created plugin
    if (!plugin) {
        plugin = try_require_1.default(`auto-plugin-${pluginPath}`);
    }
    // Try importing official plugin
    if (!plugin) {
        plugin = try_require_1.default(path.join('@auto-it', pluginPath));
    }
    if (!plugin) {
        logger.log.warn(`Could not find plugin: ${pluginPath}`);
        return;
    }
    try {
        if ('default' in plugin && plugin.default) {
            // eslint-disable-next-line new-cap
            return new plugin.default(options);
        }
        return new plugin(options);
    }
    catch (error) {
        logger.log.error(`Plugin at the following path encountered an error: ${pluginPath}`);
        throw error;
    }
}
exports.default = loadPlugin;
//# sourceMappingURL=load-plugins.js.map