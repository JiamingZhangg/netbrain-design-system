import { AsyncSeriesBailHook, AsyncSeriesWaterfallHook } from 'tapable';
import { ICommitAuthor, IExtendedCommit } from './log-parse';
import { ILabelDefinitionMap } from './release';
import { ILogger } from './utils/logger';
export interface IGenerateReleaseNotesOptions {
    owner: string;
    repo: string;
    baseUrl: string;
    labels: ILabelDefinitionMap;
    baseBranch: string;
}
export interface IChangelogHooks {
    renderChangelogLine: AsyncSeriesWaterfallHook<[[IExtendedCommit, string]]>;
    renderChangelogTitle: AsyncSeriesBailHook<[string, {
        [label: string]: string;
    }], string | void>;
    renderChangelogAuthor: AsyncSeriesBailHook<[ICommitAuthor, IExtendedCommit, IGenerateReleaseNotesOptions], string | void>;
    renderChangelogAuthorLine: AsyncSeriesBailHook<[ICommitAuthor, string], string | void>;
    addToBody: AsyncSeriesWaterfallHook<[string[], IExtendedCommit[]]>;
    omitReleaseNotes: AsyncSeriesBailHook<[IExtendedCommit], boolean | void>;
}
export default class Changelog {
    readonly hooks: IChangelogHooks;
    readonly options: IGenerateReleaseNotesOptions;
    private authors?;
    private readonly logger;
    constructor(logger: ILogger, options: IGenerateReleaseNotesOptions);
    loadDefaultHooks(): void;
    generateReleaseNotes(commits: IExtendedCommit[]): Promise<string>;
    createUserLink(author: ICommitAuthor, commit: IExtendedCommit): string | undefined;
    /**
     * Split commits into changelogTitle sections.
     */
    private splitCommits;
    private getFirstLabelNameFromLabelKey;
    private createUserLinkList;
    private generateCommitNote;
    private getAllAuthors;
    private createAuthorSection;
    private createLabelSection;
    private createReleaseNotesSection;
}
//# sourceMappingURL=changelog.d.ts.map