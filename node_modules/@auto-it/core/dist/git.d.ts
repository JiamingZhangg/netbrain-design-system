import Octokit from '@octokit/rest';
import { ICommit } from 'gitlog';
import HttpsProxyAgent from 'https-proxy-agent';
import { ILabelDefinition } from './release';
import { ILogger } from './utils/logger';
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>> & Partial<Pick<T, K>>;
export declare type IPRInfo = Omit<Octokit.ReposCreateStatusParams, 'owner' | 'repo'>;
export interface IGitOptions {
    owner: string;
    repo: string;
    baseUrl?: string;
    graphqlBaseUrl?: string;
    token?: string;
    agent?: HttpsProxyAgent;
}
export default class Git {
    readonly github: Octokit;
    readonly options: IGitOptions;
    private readonly baseUrl;
    private readonly graphqlBaseUrl;
    private readonly logger;
    constructor(options: IGitOptions, logger?: ILogger);
    getLatestReleaseInfo(): Promise<Octokit.ReposGetLatestReleaseResponse>;
    getLatestRelease(): Promise<string>;
    getCommitDate(sha: string): Promise<string>;
    getFirstCommit(): Promise<string>;
    /**
     * Get the SHA of the latest commit
     */
    getSha(short?: boolean): Promise<string>;
    getLabels(prNumber: number): Promise<string[]>;
    getPr(prNumber: number): Promise<Octokit.Response<Octokit.IssuesGetResponse>>;
    getProjectLabels(): Promise<string[]>;
    getGitLog(start: string, end?: string): Promise<ICommit[]>;
    getUserByEmail(email: string): Promise<{} | undefined>;
    getUserByUsername(username: string): Promise<Octokit.UsersGetByUsernameResponse | undefined>;
    getPullRequest(pr: number): Promise<Octokit.Response<Octokit.PullsGetResponse>>;
    searchRepo(options: Octokit.SearchIssuesAndPullRequestsParams): Promise<Octokit.SearchIssuesAndPullRequestsResponse>;
    graphql(query: string): Promise<import("@octokit/graphql/dist-types/types").GraphQlQueryResponseData>;
    createStatus(prInfo: IPRInfo): Promise<Octokit.Response<Octokit.ReposCreateStatusResponse>>;
    createLabel(name: string, label: ILabelDefinition): Promise<Octokit.Response<Octokit.IssuesCreateLabelResponse>>;
    updateLabel(name: string, label: ILabelDefinition): Promise<Octokit.Response<Octokit.IssuesUpdateLabelResponse>>;
    addLabelToPr(pr: number, label: string): Promise<Octokit.Response<Octokit.IssuesAddLabelsResponseItem[]>>;
    lockIssue(issue: number): Promise<Octokit.Response<any>>;
    getProject(): Promise<Octokit.ReposGetResponse>;
    getPullRequests(options?: Partial<Octokit.PullsListParams>): Promise<Octokit.PullsListResponseItem[]>;
    getCommitsForPR(pr: number): Promise<Octokit.PullsListCommitsResponseItem[]>;
    getCommentId(pr: number, context?: string): Promise<number>;
    deleteComment(pr: number, context?: string): Promise<void>;
    createComment(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesCreateCommentResponse>>;
    editComment(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesCreateCommentResponse>>;
    addToPrBody(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesUpdateResponse>>;
    publish(releaseNotes: string, tag: string): Promise<Octokit.Response<Octokit.ReposCreateReleaseResponse>>;
    getLatestTagInBranch(): Promise<string>;
}
export {};
//# sourceMappingURL=git.d.ts.map