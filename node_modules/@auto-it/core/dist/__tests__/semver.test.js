"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const release_1 = require("../release");
const semver_1 = tslib_1.__importStar(require("../semver"));
const semverMap = release_1.getVersionMap();
test('ranks releases right', () => {
    expect(semver_1.getHigherSemverTag(semver_1.default.major, 'minor')).toBe('major');
    expect(semver_1.getHigherSemverTag(semver_1.default.noVersion, 'bar')).toBe('patch');
    expect(semver_1.getHigherSemverTag(semver_1.default.minor, 'patch')).toBe('minor');
});
describe('calculateSemVerBump', () => {
    test('publishes pre-releases', () => {
        expect(semver_1.calculateSemVerBump([['minor', 'prerelease']], semverMap)).toBe(semver_1.default.preminor);
        expect(semver_1.calculateSemVerBump([['patch', 'prerelease']], semverMap)).toBe(semver_1.default.prepatch);
        expect(semver_1.calculateSemVerBump([['major', 'prerelease']], semverMap)).toBe(semver_1.default.premajor);
    });
    test('should be able to use multiple labels for skip-release', () => {
        expect(semver_1.calculateSemVerBump([['skip-release', 'major']], semverMap, {
            skipReleaseLabels: ['documentation']
        })).toBe(semver_1.default.noVersion);
        expect(semver_1.calculateSemVerBump([['documentation', 'major']], semverMap, {
            skipReleaseLabels: ['documentation']
        })).toBe(semver_1.default.noVersion);
        expect(semver_1.calculateSemVerBump([['major']], semverMap, {
            skipReleaseLabels: ['documentation']
        })).toBe(semver_1.default.major);
    });
});
//# sourceMappingURL=semver.test.js.map